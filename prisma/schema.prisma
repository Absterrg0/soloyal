// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Merchant {
  id                      String         @id @default(uuid())
  userId                  String         @unique
  user                    User           @relation(fields: [userId], references: [id])
  name                    String         @unique
  publicKey               String         @unique
  loyaltyTokenMintAddress String         @unique
  discountRate            Float
  rewardPolicy            RewardPolicy[]
  purchases               Purchase[]
  createdAt               DateTime       @default(now())
  updatedAt               DateTime       @updatedAt

  @@map("merchants")
}

model RewardPolicy {
  id              String   @id @default(uuid())
  merchantId      String
  merchant        Merchant @relation(fields: [merchantId], references: [id])
  duration        Int
  ruleValue       Int
  bonusPercentage Int?
  airdropAmount   Int?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("reward_policies")
}

model Customer {
  id            String     @id @default(uuid())
  walletAddress String     @unique
  purchases     Purchase[]
  userId        String     @unique
  user          User       @relation(fields: [userId], references: [id])
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  @@map("customers")
}

model Purchase {
  id         String    @id @default(uuid())
  customerId String
  customer   Customer  @relation(fields: [customerId], references: [id])
  merchantId String
  merchant   Merchant  @relation(fields: [merchantId], references: [id])
  amountPaid Float
  tokenUsed  TokenType
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("purchases")
}

enum TokenType {
  SOL
  USDC
  USDT
  LTK
}

enum UserType {
  MERCHANT
  CUSTOMER
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  userType      UserType?
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  merchant      Merchant?
  customer      Customer?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}
